!pip install git+https://github.com/afnan47/cuda.git

# Load nvcc plugin
%load_ext nvcc_plugin



%%writefile merge_sort.cu
#include <iostream>
#include <vector>
#include <chrono>
#include <algorithm>
using namespace std;

__device__ void device_swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

__global__ void kernel_bubble_sort_odd_even(int* arr, int size) {
    bool isSorted = false;
    while (!isSorted) {
        isSorted = true;
        int tid = blockIdx.x * blockDim.x + threadIdx.x;
        if (tid % 2 == 0 && tid < size - 1) {
            if (arr[tid] > arr[tid + 1]) {
                device_swap(arr[tid], arr[tid + 1]);
                isSorted = false;
            }
        }
        __syncthreads(); // Synchronize threads within block

        if (tid % 2 != 0 && tid < size - 1) {
            if (arr[tid] > arr[tid + 1]) {
                device_swap(arr[tid], arr[tid + 1]);
                isSorted = false;
            }
        }
        __syncthreads(); // Synchronize threads within block
    }
}

__global__ void kernel_merge(int* arr, int* temp, int* subarray_sizes, int array_size) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    int left_start = idx * 2 * (*subarray_sizes);

    if (left_start < array_size) {
        int mid = min(left_start + (*subarray_sizes) - 1, array_size - 1);
        int right_end = min(left_start + 2 * (*subarray_sizes) - 1, array_size - 1);

        int i = left_start;
        int j = mid + 1;
        int k = left_start;

        while (i <= mid && j <= right_end) {
            if (arr[i] <= arr[j]) {
                temp[k] = arr[i];
                i++;
            } else {
                temp[k] = arr[j];
                j++;
            }
            k++;
        }

        while (i <= mid) {
            temp[k] = arr[i];
            i++;
            k++;
        }

        while (j <= right_end) {
            temp[k] = arr[j];
            j++;
            k++;
        }

        for (int t = left_start; t <= right_end; t++) {
            arr[t] = temp[t];
        }
    }
}

void bubble_sort_odd_even(vector<int>& arr) {
    int size = arr.size();
    int* d_arr;
    cudaMalloc(&d_arr, size * sizeof(int));
    cudaMemcpy(d_arr, arr.data(), size * sizeof(int), cudaMemcpyHostToDevice);

    int blockSize = 256;
    int gridSize = (size + blockSize - 1) / blockSize;

    kernel_bubble_sort_odd_even<<<gridSize, blockSize>>>(d_arr, size);

    cudaMemcpy(arr.data(), d_arr, size * sizeof(int), cudaMemcpyDeviceToHost);

    cudaFree(d_arr);
}

void merge_sort(vector<int>& arr) {
    int array_size = arr.size();
    int* d_arr;
    int* d_temp;
    int* d_subarray_size;

    cudaMalloc(&d_arr, array_size * sizeof(int));
    cudaMalloc(&d_temp, array_size * sizeof(int));
    cudaMalloc(&d_subarray_size, sizeof(int));

    cudaMemcpy(d_arr, arr.data(), array_size * sizeof(int), cudaMemcpyHostToDevice);

    int blockSize = 256;
    int gridSize;

    int width = 1;
    while (width < array_size) {
        cudaMemcpy(d_subarray_size, &width, sizeof(int), cudaMemcpyHostToDevice);

        gridSize = (array_size / (2 * width)) + 1;

        kernel_merge<<<gridSize, blockSize>>>(d_arr, d_temp, d_subarray_size, array_size);
        cudaDeviceSynchronize();

        width *= 2;
    }

    cudaMemcpy(arr.data(), d_arr, array_size * sizeof(int), cudaMemcpyDeviceToHost);

    cudaFree(d_arr);
    cudaFree(d_temp);
    cudaFree(d_subarray_size);
}

int main() {
    int size_bubble, size_merge;
    cout << "Enter the size of the array for bubble sort: ";
    cin >> size_bubble;
    vector<int> arr_bubble(size_bubble);
    cout << "Enter the elements of the array for bubble sort:\n";
    for (int i = 0; i < size_bubble; ++i) {
        cout << "Element " << i + 1 << ": ";
        cin >> arr_bubble[i];
    }

    cout << "Enter the size of the array for merge sort: ";
    cin >> size_merge;
    vector<int> arr_merge(size_merge);
    cout << "Enter the elements of the array for merge sort:\n";
    for (int i = 0; i < size_merge; ++i) {
        cout << "Element " << i + 1 << ": ";
        cin >> arr_merge[i];
    }

    double start, end;

    start = chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count();
    bubble_sort_odd_even(arr_bubble);
    end = chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count();

    cout << "Parallel bubble sort using odd-even transposition time: " << end - start << " milliseconds" << endl;
    cout << "Sorted array using bubble sort: ";
    for (int num : arr_bubble) {
        cout << num << " ";
    }
    cout << endl;

    start = chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count();
    merge_sort(arr_merge);
    end = chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count();

    cout << "Parallel merge sort time: " << end - start << " milliseconds" << endl;
    cout << "Sorted array using merge sort: ";
    for (int num : arr_merge) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}


!nvcc merge_sort.cu -o merge
!./merge
