#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

void addEdge(vector<vector<int>>& adjList, int u, int v) {
    adjList[u].push_back(v);
    adjList[v].push_back(u); // For undirected graph
}

void BFS(vector<vector<int>>& adjList, int startVertex) {
    int n = adjList.size();
    vector<bool> visited(n, false);
    queue<int> q;
    
    visited[startVertex] = true;
    q.push(startVertex);

    while (!q.empty()) {
        int u = q.front();
        q.pop();

        cout << u << " ";

        #pragma omp parallel for
        for (int v : adjList[u]) {
            if (!visited[v]) {
                visited[v] = true;
                q.push(v);
            }
        }
    }

    cout << endl;
}

void DFSUtil(vector<vector<int>>& adjList, int u, vector<bool>& visited) {
    visited[u] = true;
    cout << u << " ";

    #pragma omp parallel for
    for (int v : adjList[u]) {
        if (!visited[v]) {
            DFSUtil(adjList, v, visited);
        }
    }
}

void DFS(vector<vector<int>>& adjList, int startVertex) {
    int n = adjList.size();
    vector<bool> visited(n, false);

    DFSUtil(adjList, startVertex, visited);

    cout << endl;
}

int main() {
    int n, e;
    cout << "Enter the number of vertices in the graph: ";
    cin >> n;
    cout << "Enter the number of edges in the graph: ";
    cin >> e;

    vector<vector<int>> adjList(n);
    cout << "Enter the edges (u v format):\n";
    for (int i = 0; i < e; ++i) {
        int u, v;
        cin >> u >> v;
        addEdge(adjList, u, v);
    }

    int startVertex;
    cout << "Enter the starting vertex for BFS and DFS: ";
    cin >> startVertex;

    cout << "BFS traversal starting from vertex " << startVertex << ":\n";
    BFS(adjList, startVertex);

    cout << "DFS traversal starting from vertex " << startVertex << ":\n";
    DFS(adjList, startVertex);

    return 0;
}
